{"version":3,"sources":["pantry-sorter.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;IASP,YAAY;;;;;;AAKH,aALT,YAAY,GAK0B;YAA5B,mBAAmB,yDAAG,IAAI;;8BALpC,YAAY;;AAMV,YAAG,CAAC,mBAAmB,EACnB,MAAM,IAAI,SAAS,CAAC,+DAA+D,CAAC,CAAC;;AAEzF,YAAI,CAAC,oBAAoB,GAAG,mBAAmB,CAAC;KACnD;;iBAVC,YAAY;;;;;;;;eAiBV,gBAAsC;gBAArC,UAAU,yDAAG,IAAI;gBAAE,SAAS,yDAAG,IAAI;;AACpC,gBAAG,OAAO,UAAU,KAAK,UAAU,EAC/B,MAAM,IAAI,SAAS,CAAC,+BAA+B,CAAC,CAAC;AACzD,gBAAG,OAAO,SAAS,KAAK,UAAU,EAC9B,MAAM,IAAI,SAAS,CAAC,8BAA8B,CAAC,CAAC;;;AAGxD,gBAAI,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;AAC7C,oBAAQ,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;uBAAK,UAAU,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,WAAW,CAAC;aAAA,CAAC,CAAC;;;AAGlE,gBAAI,OAAO,GAAG,IAAI,gBAAgB,EAAE,CAAC;AACrC,oBAAQ,CAAC,OAAO,CAAC,UAAA,CAAC;uBAAI,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC;aAAA,CAAC,CAAC;AACtD,gBAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;SAC/C;;;;;;;;;;;eASY,uBAAC,SAAS,EAAE;AACrB,gBAAI,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC;AAC/C,gBAAI,QAAQ,GAAG,EAAE,CAAC;AAClB,iBAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AACrC,oBAAI,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AACrB,oBAAI,IAAI,GAAG,IAAI,cAAc,CAAC,EAAE,EAAE,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;AACjD,wBAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACvB;AACD,mBAAO,QAAQ,CAAC;SACnB;;;aAEoB,eAAG;AACpB,gBAAG,CAAC,IAAI,CAAC,sBAAsB,EAC3B,IAAI,CAAC,sBAAsB,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;AACpF,mBAAO,IAAI,CAAC,sBAAsB,CAAC;SACtC;;;WAvDC,YAAY;;;IA0DZ,cAAc;AACL,aADT,cAAc,GAC4B;YAAhC,OAAO,yDAAG,IAAI;YAAE,SAAS,yDAAG,EAAE;;8BADxC,cAAc;;AAEZ,YAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;AACxB,YAAI,CAAC,UAAU,GAAG,SAAS,CAAC;KAC/B;;iBAJC,cAAc;;;;;;aASD,eAAG;AACd,mBAAO,IAAI,CAAC,UAAU,CAAC;SAC1B;;;aAEU,eAAG;AACV,mBAAO,IAAI,CAAC,QAAQ,CAAC;SACxB;;;WAfC,cAAc","file":"pantry-sorter.js","sourcesContent":["\"use strict\";\n\n/**\n * Sorter class that uses DOM as a source of data\n * and will sort the DOM Elements based on a user defined criteria\n *\n * @example\n * new PantrySorter(\".sort-these\").sort((a, b) => a.localeCompare(b), e => e.textContent );\n */\nclass PantrySorter {\n    /**\n     *\n     * @param {Element} baseElementSelector Selector to the base element, the childre on which will be sorted\n     */\n    constructor(baseElementSelector = null) {\n        if(!baseElementSelector)\n            throw new TypeError(\"baseElementSelector must be a valid selector to a DOM element\");\n\n        this._baseElementSelector = baseElementSelector;\n    }\n\n    /**\n     * Sort the DOM elements\n     * @param {function} comparator Comperator function implementation\n     * @param {function} compareBy The property by which the comparison should happen\n     */\n    sort(comparator = null, compareBy = null) {\n        if(typeof comparator !== \"function\")\n            throw new TypeError(\"Comperator must be a function\");\n        if(typeof compareBy !== \"function\")\n            throw new TypeError(\"compareBy must be a function\");\n\n        // sort elements\n        let elements = this._getSortItems(compareBy);\n        elements.sort((a, b) => comparator(a.compareItem, b.compareItem));\n\n        // update DOM\n        let docFrag = new DocumentFragment();\n        elements.forEach(e => docFrag.appendChild(e.element));\n        this._containerElement.appendChild(docFrag);\n    }\n\n    // TODO: create an ES6 generator\n    /**\n     * Get the list of child elements for sorting\n     * @param {function} compareBy\n     * @returns {PantrySortItem[]} List of childNodes that need to be sorted\n     * @private\n     */\n    _getSortItems(compareBy) {\n        let children = this._containerElement.children;\n        let itemList = [];\n        for(let i = 0; i < children.length; ++i) {\n            let cc = children[i];\n            let item = new PantrySortItem(cc, compareBy(cc));\n            itemList.push(item);\n        }\n        return itemList;\n    }\n\n    get _containerElement() {\n        if(!this._containerElementCache)\n            this._containerElementCache = document.querySelector(this._baseElementSelector);\n        return this._containerElementCache;\n    }\n}\n\nclass PantrySortItem {\n    constructor(element = null, compareBy = \"\") {\n        this._element = element;\n        this._compareBy = compareBy;\n    }\n\n    /**\n     * @returns {string}\n     */\n    get compareItem() {\n        return this._compareBy;\n    }\n\n    get element() {\n        return this._element;\n    }\n}"],"sourceRoot":"/source/"}